#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""The simrep tool generates html reports from simulation data. 
The user can provide postprocessing scripts creating plots and plugins 
describing documents collecting the results, using a simple Python 
framework.
"""

from __future__ import unicode_literals
from __future__ import print_function
from builtins import str

import sys
import os
import pkgutil
import argparse
import simrep.pydocument as pydocu
import simrep.simrephtml as rephtml
import simrep.plugins
from  postcactus import simdir

def create_repdir(rdir):
  if (not os.path.isdir(rdir)):
    os.mkdir(rdir)
  #
#

def import_by_name(name):
  fqmn = "simrep.plugins.%s" % name
  __import__(fqmn)
  return sys.modules[fqmn]
#

def main(datadir, repdir, skip_post, repmodules):
  ddir = os.path.abspath(str(datadir))
  rdir = os.path.abspath(str(repdir))
  sdir = simdir.SimDir(ddir)
  create_repdir(rdir)
  mods = [import_by_name(mn) for mn in repmodules]
  msuc = []
  if skip_post:
    msuc = mods
  else:
    for m in mods:
      mname =  m.__name__
      print ("\nModule %s postprocessing" % mname)
      #print dir(m)
      try:
        m.postprocess(ddir, sdir, rdir)
        msuc.append(m)
      except Exception as inst:
        print('Postprocessing failed (',inst,')')
        print('Skipping module', mname)
      #  
    #
  #
  rep = []
  for m in msuc:
    mname =  m.__name__
    print ("\nModule %s generating report" % mname)
    try:
      r = m.create_report(ddir, sdir, rdir) 
      if (not pydocu.is_doc_entity(r, 'section')):
        raise RuntimeError("Error: plugin did not return a document section")
      #
      rep.append(r)
    except Exception as inst:
      print('Generating report failed (',inst,')')
      print('Skipping module', mname)
    #
  #
  try:
    print("\nCreating HTML")

    if not rep:
      raise RuntimeError('No content')
    #
    rep = pydocu.simreport("Simulation report","sim", rep)
  
    rephtml.render(rep, rdir)
  except Exception as inst:
    print('Creating HTML failed (',inst,'), aborting')
  #
#
    

def get_available_plugins():
  pkgdir    = os.path.dirname(simrep.plugins.__file__)
  return [name for mfind,name,isp in pkgutil.iter_modules([pkgdir])]
#

def mk_plugin_help():
  pl = get_available_plugins()
  pl = ", ".join(pl)
  return "Available plugins: %s." % pl
#


parser = argparse.ArgumentParser(description=__doc__,
           epilog=mk_plugin_help(),
           formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('--datadir', default='.', metavar='<folder>',
    help="Simulation data folder.")
parser.add_argument('--repdir', default='./report', metavar='<folder>',
    help="Folder to store the html files and plots. If it does already "
         "exist, it will be overwritten, else created.")
parser.add_argument('--skip-post', action='store_true', default=False,
    help="Skip postprocessing, only regenerate HTML")
parser.add_argument('plugin', nargs='+', 
    help='Plugins to include in the report.')
opt     = parser.parse_args()


main(opt.datadir, opt.repdir, opt.skip_post, opt.plugin)

